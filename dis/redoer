#!/dis/sh
if {no $indent} {
       indent = ''
}

field1sed = 's,[ 	].+$,,'
field2sed = 's,^.*[ 	],,'

target = $1

if {ftest -x $target^.dep.do} {
       thisindent = $indent
       indent = '  '^$indent
       redo $target^.dep
       indent = $thisindent
}

if {ftest -s $target^.dep} {
       olddepsum = `{cat $target^.dep.sum >[2]/dev/null | sed $field1sed}

       noself = `{sed $field2sed $target^.dep | sed '/^'^$target^'$/d'}
       if {! no $noself} {
               echo 'map ''repare ''''  '''''^$indent^''''  $noself
               map 'repare ''  '''^$indent  $noself
       }

       apply {
               if {! md5sum $1 >[2]/dev/null} {echo '0 '^$1}
       } `{sed $field2sed $target^.dep} > $target^.dep.new

       mv $target^.dep.new $target^.dep
       (newdepsum newdepfile) = `{resum $target^.dep}
       if {! ~ $#newdepsum 0} {echo $newdepsum^'	'^$newdepfile > $target^.dep.sum}
} {
       olddepsum = 0
       newdepsum = 0
}

# delay exit to here, to redo dependencies of a target with no do script
if {grep '^'^$target^'$' redont >/dev/null >[2=1]} {exit}
echo redo $indent^$target

if {ftest -x $target^.do} {
       olddosum = `{cat $target^.do.sum >[2]/dev/null | sed $field1sed}
       (newdosum newdofile) = `{resum $target^.do}
       do = ./^$target^.do $target
} {
       filesed = 's,(.*)\.[^.]+$,\1,'
       extsed = 's,.*\.([^.]+)$,\1,'

       filext = $target
       file = `{echo $filext | sed $filesed}
       ext = `{echo $filext | sed $extsed}

       if {ftest -x default.^$ext^.do} {
               olddosum = `{cat $target^.do.sum >[2]/dev/null | sed $field1sed}
               (newdosum newdofile) = `{resum default.^$ext^.do}
               do = ./default.^$ext^.do $filext
       } {
               echo $target >> redont
               exit
       }
}

if {and {! ~ $#newdosum 0} {! ~ $olddosum $newdosum}} {
       echo $newdosum^'	'^$newdofile > $target^.do.sum
}

if {or {! ~ $olddepsum $newdepsum} {! ~ $olddosum $newdosum} {! ftest -e $target}} {
	if {ftest -f $target} {cp $target $target.reold; reold=1} {reold=0}
	
	if {ftest -f $target.redoing} {
		while {ftest -f $target.redoing} {
			sleep 1
			$target.redoing >[2]/dev/null
		}
		
		# Another process may have satisfied all conditions to build
		# while we were waiting, so restart to check again.
		redo $target
		exit
	}
	
	touch $target.redoing
	echo '#!/dis/sh' >> $target.redoing
	echo 'if {! ftest -d /prog/'^${pid}^'} {rm -f '^$target^'.redoing}' >> $target.redoing
	
	$do
	dostatus = $status
	rm -f $target.redoing
       
	if {and {~ $dostatus 'revert'} {~ $reold 1}} {
		if {ftest -f $target} {cp $target $target.renew}
		if {ftest -f $target.reold} {cp $target.reold $target}
	}
       
	if {! ~ $dostatus ''} {
		echo redo $indent^$target error: $dostatus
	}
}

exit
