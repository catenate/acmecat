#!/dis/sh
if {no $indent} {
	indent = ''
}

field1sed = 's,[ 	].+$,,'
field2sed = 's,^.*[ 	],,'

target = $1

# exit before we update dependencies, so we don't forget we need to rebuild
oldtargsum = `{cat $target^.sum >[2]/dev/null | sed $field1sed}
(newtargsum newtargfile) = `{cresum $target}
if {and {! ~ $#oldtargsum 0} {! ~ $#newtargsum 0}} {
	if {! ~ $oldtargsum $newtargsum} {
		echo credo $indent^$target will not overwrite non-credo change
		exit
	}
}

if {ftest -x $target^.dep.do} {
	thisindent = $indent
	indent = '  '^$indent
	credo $target^.dep
	indent = $thisindent
}

if {ftest -s $target^.dep} {
	olddepsum = `{cat $target^.dep.sum >[2]/dev/null | sed $field1sed}

	noself = `{sed $field2sed $target^.dep | sed '/^'^$target^'$/d'}
	if {! no $noself} {
		echo 'map ''crepare ''''  '''''^$indent^''''  $noself
		map 'crepare ''  '''^$indent  $noself
	}

	apply {
		if {! md5sum $1 >[2]/dev/null} {echo '0 '^$1}
	} `{sed $field2sed $target^.dep} > $target^.dep.new

	mv $target^.dep.new $target^.dep
	(newdepsum newdepfile) = `{cresum $target^.dep}
	if {! ~ $#newdepsum 0} {echo $newdepsum^'	'^$newdepfile > $target^.dep.sum}
} {
	olddepsum = 0
	newdepsum = 0
}

# delay exit to here, to redo dependencies of a target with no do script
if {grep '^'^$target^'$' redont >/dev/null >[2=1]} {exit}
echo credo $indent^$target

if {ftest -x $target^.do} {
	olddosum = `{cat $target^.do.sum >[2]/dev/null | sed $field1sed}
	(newdosum newdofile) = `{cresum $target^.do}
	do = ./^$target^.do $target
} {
	filesed = 's,(.*)\.[^.]+$,\1,'
	extsed = 's,.*\.([^.]+)$,\1,'

	filext = $target
	file = `{echo $filext | sed $filesed}
	ext = `{echo $filext | sed $extsed}

	if {ftest -x default.^$ext^.do} {
		olddosum = `{cat $target^.do.sum >[2]/dev/null | sed $field1sed}
		(newdosum newdofile) = `{cresum default.^$ext^.do}
		do = ./default.^$ext^.do $filext
	} {
		echo $target >> redont
		exit
	}
}

if {and {! ~ $#newdosum 0} {! ~ $olddosum $newdosum}} {
	echo $newdosum^'	'^$newdofile > $target^.do.sum
}

if {or {! ~ $olddepsum $newdepsum} {! ~ $olddosum $newdosum} {! ftest -e $target}} {
	if {ftest -f $target.redoing} {
		while {ftest -f $target.redoing} {
			sleep 1
			$target.redoing >[2]/dev/null
		}
		
		# Another process may have satisfied all conditions to build
		# while we were waiting, so restart to check again.
		credo $target
		exit
	}
	
	touch $target.redoing
	echo '#!/dis/sh' >> $target.redoing
	echo 'if {! ftest -d /prog/'^${pid}^'} {rm -f '^$target^'.redoing}' >> $target.redoing
	
	if {ftest -f $target} {cp $target $target.reold; reold=1} {reold=0}
	
	$do
	dostatus = $status
	rm -f $target.redoing

	if {and {~ $dostatus 'revert'} {~ $reold 1}} {
		if {ftest -f $target} {cp $target $target.renew}
		if {ftest -f $target.reold} {cp $target.reold $target}
	}
	
	if {ftest -e $target} {cresum $target > $target^.sum}

	if {! ~ $dostatus ''} {
		echo credo $indent^$target error: $dostatus
	}
}

exit
